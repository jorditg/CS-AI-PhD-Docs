library(caret)
exit
q()
a=c(140,138,150,148,135)
b=c(132,135,151,146,130)
mean(a)
sd(a)
sd(b)
mean(b)
c=a-b
c
mean(c)
sd(c)
3.4/3.36*SQRT(5)
3.4/3.36*sqrt(5)
?pt
pt(2.26, df=4)
1-0.956
qt(0.025, df=8)
1100-23.06
1100+23.06
?pnorm
pnorm(-1.87)
sqrt((1.5*1.5+1.8*1.8)/2)
2/1.657
pt(1.207, df=16)
1-0.877
0.123/2
qnorm(0.05)
dnorm(1.6449, 0.01, 0.04)
dnorm(-1.6449, 0.01, 0.04)
dnorm(1.6449, 0.01, 0.04)
pnorm(1.6449, 0.01, 0.04)
power.t.test(n=100, delta=0.01, sd=0.04, type="one.sample", alt="one.sided")
power.t.test(power=0.90, delta=0.01, sd=0.04, type="one.sample", alt="one.sided")
a =c(140-132,138-135,150-151,148-146,135-130)
summary(a)
sd(a)
?pt
pt(1,df=4)
library(data.table)
cl_win10 <- read.csv("cl_win10.csv")
cl_win10 <- data.table(cl_win10)
cl_win10 <- cl_win10[,X:=NULL]
key = c("division", "season","team", "Date")
setkeyv(cl_win10, key)
results_by_team <- read.csv("results_by_team.csv")
results_by_team <- data.table(results_by_team)
results_by_team$Date <- as.Date(results_by_team$Date, origin = "1900-01-01")
divisions <- levels(results_by_team$Div)
seasons <- levels(results_by_team$Season)
stat10 <- data.table(division = character(0), season = character(0), date = integer(0),
team = character(0), R = character(0), GH = character(0), GA = character(0),
T1.GF = integer(0), T1.GA = integer(0), T1.W = character(0), T1.R = character(0),
T1.GPO = integer(0), T1.WO = integer(0), T1.DO = integer(0), T1.LO = integer(0),
T1.GFO = integer(0), T1.GAO = integer(0), T1.GPH = integer(0), T1.WH = integer(0),
T1.DH = integer(0), T1.LH = integer(0), T1.GFH = integer(0), T1.GAH = integer(0),
T1.GPA = integer(0), T1.WA = integer(0), T1.DA = integer(0), T1.LA = integer(0),
T1.GFA = integer(0), T1.GAA = integer(0), T1.GD = integer(0), T1.PTS = integer(0),
T2.GF = integer(0), T2.GA = integer(0), T2.W = character(0), T2.R = character(0),
T2.GPO = integer(0), T2.WO = integer(0), T2.DO = integer(0), T2.LO = integer(0),
T2.GFO = integer(0), T2.GAO = integer(0), T2.GPH = integer(0), T2.WH = integer(0),
T2.DH = integer(0), T2.LH = integer(0), T2.GFH = integer(0), T2.GAH = integer(0),
T2.GPA = integer(0), T2.WA = integer(0), T2.DA = integer(0), T2.LA = integer(0),
T2.GFA = integer(0), T2.GAA = integer(0), T2.GD = integer(0), T2.PTS = integer(0),
T3.GF = integer(0), T3.GA = integer(0), T3.W = character(0), T3.R = character(0),
T3.GPO = integer(0), T3.WO = integer(0), T3.DO = integer(0), T3.LO = integer(0),
T3.GFO = integer(0), T3.GAO = integer(0), T3.GPH = integer(0), T3.WH = integer(0),
T3.DH = integer(0), T3.LH = integer(0), T3.GFH = integer(0), T3.GAH = integer(0),
T3.GPA = integer(0), T3.WA = integer(0), T3.DA = integer(0), T3.LA = integer(0),
T3.GFA = integer(0), T3.GAA = integer(0), T3.GD = integer(0), T3.PTS = integer(0),
T4.GF = integer(0), T4.GA = integer(0), T4.W = character(0), T4.R = character(0),
T4.GPO = integer(0), T4.WO = integer(0), T4.DO = integer(0), T4.LO = integer(0),
T4.GFO = integer(0), T4.GAO = integer(0), T4.GPH = integer(0), T4.WH = integer(0),
T4.DH = integer(0), T4.LH = integer(0), T4.GFH = integer(0), T4.GAH = integer(0),
T4.GPA = integer(0), T4.WA = integer(0), T4.DA = integer(0), T4.LA = integer(0),
T4.GFA = integer(0), T4.GAA = integer(0), T4.GD = integer(0), T4.PTS = integer(0),
T5.GF = integer(0), T5.GA = integer(0), T5.W = character(0), T5.R = character(0),
T5.GPO = integer(0), T5.WO = integer(0), T5.DO = integer(0), T5.LO = integer(0),
T5.GFO = integer(0), T5.GAO = integer(0), T5.GPH = integer(0), T5.WH = integer(0),
T5.DH = integer(0), T5.LH = integer(0), T5.GFH = integer(0), T5.GAH = integer(0),
T5.GPA = integer(0), T5.WA = integer(0), T5.DA = integer(0), T5.LA = integer(0),
T5.GFA = integer(0), T5.GAA = integer(0), T5.GD = integer(0), T5.PTS = integer(0),
T6.GF = integer(0), T6.GA = integer(0), T6.W = character(0), T6.R = character(0),
T6.GPO = integer(0), T6.WO = integer(0), T6.DO = integer(0), T6.LO = integer(0),
T6.GFO = integer(0), T6.GAO = integer(0), T6.GPH = integer(0), T6.WH = integer(0),
T6.DH = integer(0), T6.LH = integer(0), T6.GFH = integer(0), T6.GAH = integer(0),
T6.GPA = integer(0), T6.WA = integer(0), T6.DA = integer(0), T6.LA = integer(0),
T6.GFA = integer(0), T6.GAA = integer(0), T6.GD = integer(0), T6.PTS = integer(0),
T7.GF = integer(0), T7.GA = integer(0), T7.W = character(0), T7.R = character(0),
T7.GPO = integer(0), T7.WO = integer(0), T7.DO = integer(0), T7.LO = integer(0),
T7.GFO = integer(0), T7.GAO = integer(0), T7.GPH = integer(0), T7.WH = integer(0),
T7.DH = integer(0), T7.LH = integer(0), T7.GFH = integer(0), T7.GAH = integer(0),
T7.GPA = integer(0), T7.WA = integer(0), T7.DA = integer(0), T7.LA = integer(0),
T7.GFA = integer(0), T7.GAA = integer(0), T7.GD = integer(0), T7.PTS = integer(0),
T8.GF = integer(0), T8.GA = integer(0), T8.W = character(0), T8.R = character(0),
T8.GPO = integer(0), T8.WO = integer(0), T8.DO = integer(0), T8.LO = integer(0),
T8.GFO = integer(0), T8.GAO = integer(0), T8.GPH = integer(0), T8.WH = integer(0),
T8.DH = integer(0), T8.LH = integer(0), T8.GFH = integer(0), T8.GAH = integer(0),
T8.GPA = integer(0), T8.WA = integer(0), T8.DA = integer(0), T8.LA = integer(0),
T8.GFA = integer(0), T8.GAA = integer(0), T8.GD = integer(0), T8.PTS = integer(0),
T9.GF = integer(0), T9.GA = integer(0), T9.W = character(0), T9.R = character(0),
T9.GPO = integer(0), T9.WO = integer(0), T9.DO = integer(0), T9.LO = integer(0),
T9.GFO = integer(0), T9.GAO = integer(0), T9.GPH = integer(0), T9.WH = integer(0),
T9.DH = integer(0), T9.LH = integer(0), T9.GFH = integer(0), T9.GAH = integer(0),
T9.GPA = integer(0), T9.WA = integer(0), T9.DA = integer(0), T9.LA = integer(0),
T9.GFA = integer(0), T9.GAA = integer(0), T9.GD = integer(0), T9.PTS = integer(0),
T10.GF = integer(0), T10.GA = integer(0), T10.W = character(0), T10.R = character(0),
T10.GPO = integer(0), T10.WO = integer(0), T10.DO = integer(0), T10.LO = integer(0),
T10.GFO = integer(0), T10.GAO = integer(0), T10.GPH = integer(0), T10.WH = integer(0),
T10.DH = integer(0), T10.LH = integer(0), T10.GFH = integer(0), T10.GAH = integer(0),
T10.GPA = integer(0), T10.WA = integer(0), T10.DA = integer(0), T10.LA = integer(0),
T10.GFA = integer(0), T10.GAA = integer(0), T10.GD = integer(0), T10.PTS = integer(0)
)
stat10$date <- as.Date(stat10$date, origin = "1900-01-01")
?list
?"vector"
vector(10, NA)
vector(NA, 10)
vector("list", 247)
rowdata <- vector("list", 247)
rowdata[1] <- "a"
rowdata
rowdata[246] <- "a"
rowdata
install.packages('lao')
install.packages('glmnet')
install.packages('glm2')
install.packages('pROC')
install.packages('ggROC')
install.packages('RROC')
install.packages('ROCR')
install.packages('GGally')
data <- read.csv("kappa.csv")
setwd("~/Desktop/retine-project/test-results-probabilistic-enhancement")
# conditional probalities P(eye1=c|eye2=d)
# with this probabilities we can calculate P(eye1=c ^ eye2=d) as P(eye1=c|eye2=d)*P(eye2=d) or P(eye2=d|eye1=c)*P(eye1=c)
# where P(eye1=c) and P(eye2=d) are given by the model.
# two matrices for all the possibilities of P(eye1=c ^ eye2=d) are calculated
# the max value of the calculated matrix gives us the most probable value for eye1 and eye2 class
data <- read.csv("left_right.csv")
library(mosaic)
cond_prob_lr <- tally(~Left|Right, data=data, format="proportion")
cond_prob_rl <- tally(~Right|Left, data=data, format="proportion")
# probs matrix represents: P(A|B) where A is in columns and B in rows
#addmargins(cond_prob_lr)
#cond_prob_lr = prop.table(cond_prob_lr,1)
#cond_prob_rl = prop.table(cond_prob_rl,1)
# load the predictions
pred <- read.csv("./512x512/output.csv")
#ordering
pred_order <- pred[order(pred[1]),]
# the two eyes are suposed to be in contigous rows after this ordering
pred_order$alone <- NULL
pred_order$combined <- NULL
pred_order$alone_other <- NULL
for(i in seq(1, nrow(pred_order), by = 2))
{
prl <- pred_order[i,3:7]
prob_r = cond_prob_rl%*%t(prl)
pred_order$alone[i] <- which(prl == max(prl))
prr <- pred_order[i+1,3:7]
prob_l = cond_prob_lr%*%t(prr)
pred_order$alone[i+1] <- which(prr == max(prr))
prl <-  prl + prob_l
prr <-  prr + prob_r
pred_order$combined[i] <- which(prl == max(prl))
pred_order$combined[i+1] <- which(prr == max(prr))
pred_order$alone_other[i] <- which(prob_l == max(prob_l))
pred_order$alone_other[i+1] <- which(prob_r == max(prob_r))
}
# Kappa with info only of own eye
library(irr)
ratings=data.frame(labels=pred_order$label, res=pred_order$alone)
kappa2(ratings, weight ="squared")
library(caret)
confusionMatrix(data=pred_order$alone, reference=pred_order$label)
head(ratings)
